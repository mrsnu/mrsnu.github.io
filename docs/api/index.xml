<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API on</title><link>https://mrsnu.github.io/docs/api/</link><description>Recent content in API on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://mrsnu.github.io/docs/api/index.xml" rel="self" type="application/rss+xml"/><item><title>C</title><link>https://mrsnu.github.io/docs/api/c/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://mrsnu.github.io/docs/api/c/</guid><description>Introduction # Band provides a C API for developers who want to use Band in their C/C++ projects. The API is a thin wrapper around the core C++ API. The C API is available in the libband.h header file.
Link provides a complete example of how to dynamically load the library and use the C API.
Example # #include &amp;lt;libband.h&amp;gt; int main() { // 1. Create a configuration for the engine.</description></item><item><title>Java</title><link>https://mrsnu.github.io/docs/api/java/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://mrsnu.github.io/docs/api/java/</guid><description>Introduction # Band provides a Java API to support Android native applications. This document provides a quick overview of how to use the Java API.
Example # The following example shows how to use the Java API to create an engine, register a model, create input and output tensors, and run the model. Link provides a complete example of how to use the Java API to run a model on an image.</description></item><item><title>Unreal Engine Plugin</title><link>https://mrsnu.github.io/docs/api/unreal-plugin/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://mrsnu.github.io/docs/api/unreal-plugin/</guid><description>Introduction # Band provides an official plugin for Unreal Engine. We support both Blueprint (visual scripting language of the UE) and C++ based interfaces.
Example # We first demonstrate how to use the plugin with a simple example. Below code snippet is part of the mobile augmented-reality classification example built with the C++ interface of the plugin.
Link to Example
C++ # The main workflow of the example is as follows: Initialize the plugin and load the model.</description></item></channel></rss>