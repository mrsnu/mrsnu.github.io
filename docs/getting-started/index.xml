<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on</title><link>https://mrsnu.github.io/docs/getting-started/</link><description>Recent content in Getting Started on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://mrsnu.github.io/docs/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Quick Start</title><link>https://mrsnu.github.io/docs/getting-started/quick-start/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://mrsnu.github.io/docs/getting-started/quick-start/</guid><description>Prerequisites # Install Android SDK 28, NDK v19.2.53456
or create Visual Studio Code Dev Container using [root]/.devcontainer or utilize [root]/.devcontainer/Dockerfile Install Bazel
Install Bazelisk or Bazel We recommend to use Bazelisk to avoid version mismatch Configure Android SDK, NDK for build system
python configure.py How to build &amp;amp; run # Refer to detailed instructions in [root]/script
Run test
python script/run_test.py -android Build Android AAR
sh script/build_aar_armv8.sh Build C API
python script/build_c_api.</description></item><item><title>Tutorial</title><link>https://mrsnu.github.io/docs/getting-started/tutorial/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://mrsnu.github.io/docs/getting-started/tutorial/</guid><description>Requirements # Starts a new Android project # Starts a new C project # Starts a new Unreal Engine project #</description></item><item><title>Benchmark Tool</title><link>https://mrsnu.github.io/docs/getting-started/benchmark/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://mrsnu.github.io/docs/getting-started/benchmark/</guid><description>Band provides a simple C++ binary to benchmark a runtime performance. The binary generates repeatitive model requests based on a given config file, and reports latency statistics afterwards.
How to run # [root]/script/run_benchmark.py script will build band_benchmark binary file and execute it with a specified config file. Built binary file and target config file can be found in [root]/benchmark.
On Android # If you want to build binary from docker container (Refer to [root]/script/docker_util.</description></item><item><title>Config</title><link>https://mrsnu.github.io/docs/getting-started/config/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://mrsnu.github.io/docs/getting-started/config/</guid><description>There are four configuration objects for each Band&amp;rsquo;s component.
Each configuration field is optional or required. If a field is optional, then it is guaranteed that the default value exists. If a field is required, a configuration cannot be generated by RuntimeConfigBuilder without specifying the field.
Enumeration Types # SchedulerType
kBandFixedDeviceFixedWorker SchedulerType::RoundRobin SchedulerType::ShortestExpectedLatency kBandFixedDeviceFixedWorkerGlobalQueue SchedulerType::HeterogeneousEarliestFinishTime SchedulerType::LeastSlackTimeFirst SchedulerType::HeterogeneousEarliestFinishTimeReserved CPUMaskFlags
CPUMaskFlags::All CPUMaskFlags::Little CPUMaskFlags::Big CPUMaskFlags::Primary DeviceFlags
DeviceFlags::CPU DeviceFlags::GPU DeviceFlags::DSP DeviceFlags::NPU SubgraphPreparationType
SubgraphPreparationType::NoFallbackSubgraph SubgraphPreparationType::FallbackPerWorker SubgraphPreparationType::UnitSubgraph SubgraphPreparationType::MergeUnitSubgraph ProfileConfig # online [type: bool, default: true]: Profile online if true, offline if false.</description></item></channel></rss>